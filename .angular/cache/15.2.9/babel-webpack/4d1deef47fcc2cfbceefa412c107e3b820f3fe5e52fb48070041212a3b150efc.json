{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nvar PostsService = /** @class */function () {\n  function PostsService(http, router) {\n    this.http = http;\n    this.router = router;\n    this.posts = [];\n    this.postsUpdated = new Subject();\n  }\n  PostsService.prototype.getPosts = function (postsPerPage, currentPage) {\n    var _this = this;\n    var queryParams = \"?pagesize=\".concat(postsPerPage, \"&page=\").concat(currentPage);\n    this.http.get(\"http://localhost:3000/api/posts\" + queryParams).pipe(map(function (postData) {\n      return {\n        posts: postData.posts.map(function (post) {\n          return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath\n          };\n        }),\n        maxPosts: postData.maxPosts\n      };\n    })).subscribe(function (transformedPostData) {\n      _this.posts = transformedPostData.posts;\n      _this.postsUpdated.next({\n        posts: __spreadArray([], _this.posts, true),\n        postCount: transformedPostData.maxPosts\n      });\n    });\n  };\n  PostsService.prototype.getPostUpdateListener = function () {\n    return this.postsUpdated.asObservable();\n  };\n  PostsService.prototype.getPost = function (id) {\n    return this.http.get(\"http://localhost:3000/api/posts/\" + id);\n  };\n  PostsService.prototype.addPost = function (title, content, image) {\n    var _this = this;\n    var postData = new FormData();\n    postData.append('title', title);\n    postData.append('content', content);\n    postData.append('image', image, title);\n    this.http.post(\"http://localhost:3000/api/posts\", postData).subscribe(function (responseData) {\n      // const post: Post ={id: responseData.post.id,\n      //   title: title,\n      //   content: content,\n      //   imagePath: responseData.post.imagePath\n      // };\n      // this.posts.push(post);\n      // this.postsUpdated.next([...this.posts]);\n      _this.router.navigate([\"/\"]);\n    });\n  };\n  PostsService.prototype.updatePost = function (id, title, content, image) {\n    var _this = this;\n    var postData;\n    if (typeof image === 'object') {\n      postData = new FormData();\n      postData.append('id', id);\n      postData.append('title', title);\n      postData.append('content', content);\n      postData.append('image', image, title);\n    } else {\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image\n      };\n    }\n    this.http.put(\"http://localhost:3000/api/posts/\" + id, postData).subscribe(function (response) {\n      // const updatedPosts = [...this.posts];\n      // const oldPostIndex = updatedPosts.findIndex(p => p.id === id);\n      // const post: Post ={\n      //   id: id,\n      //   title: title,\n      //   content: content,\n      //   imagePath: \"\"\n      // };\n      // updatedPosts[oldPostIndex] = post;\n      // this.posts = updatedPosts;\n      // this.postsUpdated.next([...this.posts]);\n      _this.router.navigate([\"/\"]);\n    });\n  };\n  PostsService.prototype.deletePost = function (postId) {\n    return this.http.delete(\"http://localhost:3000/api/posts/\" + postId);\n    // .subscribe(() => {\n    //   const updatedPosts = this.posts.filter(post => post.id !== postId);\n    //   this.posts = updatedPosts;\n    //   this.postsUpdated.next([...this.posts]);\n    // });\n  };\n\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PostsService;\n}();\nexport { PostsService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}